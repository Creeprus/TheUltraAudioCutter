#define MCG_WINRT_SUPPORTED
using Mcg.System;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.WindowsRuntime;
using global::Windows.Foundation;
using global::Windows.Foundation.Collections;


// -----------------------------------------------------------------------------------------------------------
// 
// WARNING: THIS SOURCE FILE IS FOR 64-BIT BUILDS ONLY!
// 
// MCG GENERATED CODE
// 
// This C# source file is generated by MCG and is added into the application at compile time to support interop features.
// 
// It has three primary components:
// 
// 1. Public type definitions with interop implementation used by this application including WinRT & COM data structures and P/Invokes.
// 
// 2. The '__Interop' class containing marshaling code that acts as a bridge from managed code to native code.
// 
// 3. The 'McgNative' class containing marshaling code and native type definitions that call into native code and are called by native code.
// 
// -----------------------------------------------------------------------------------------------------------
// 
// warning CS0067: The event 'event' is never used
#pragma warning disable 67
// warning CS0169: The field 'field' is never used
#pragma warning disable 169
// warning CS0649: Field 'field' is never assigned to, and will always have its default value 0
#pragma warning disable 414
// warning CS0414: The private field 'field' is assigned but its value is never used
#pragma warning disable 649
// warning CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// warning CS0108 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable 108
// warning CS0114 'member1' hides inherited member 'member2'.  To make the current method override that implementation, add the override keyword. Otherwise add the new keyword.
#pragma warning disable 114
// warning CS0659 'type' overrides Object.Equals but does not override GetHashCode.
#pragma warning disable 659
// warning CS0465 Introducing a 'Finalize' method can interfere with destructor invocation. Did you intend to declare a destructor?
#pragma warning disable 465
// warning CS0028 'function declaration' has the wrong signature to be an entry point
#pragma warning disable 28
// warning CS0162 Unreachable code Detected
#pragma warning disable 162
// warning CS0628 new protected member declared in sealed class
#pragma warning disable 628

namespace __Interop
{
	/// <summary>
	/// P/Invoke class for module 'ole32.Dll'
	/// </summary>
	public unsafe static partial class ole32_Dll
	{
		// Signature, CoCreateInstance, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_Guid__System.Guid, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_Guid__System.Guid, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio.Asio, Version=2.0.0.0, Culture=neutral, PublicKeyToken=e279aa5131008a41", "NAudio.Wave.Asio.AsioDriver", "CoCreateInstance")]
		public static int CoCreateInstance(
					ref global::System.Guid clsid, 
					global::System.IntPtr inner, 
					uint context, 
					ref global::System.Guid uuid, 
					out global::System.IntPtr rReturnedComObject)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System.Guid* pinned_clsid = &(clsid))
				fixed (global::System.Guid* pinned_uuid = &(uuid))
					fixed (global::System.IntPtr* pinned_rReturnedComObject = &(rReturnedComObject))
					{
						// Call to native method
						unsafe___value = global::__Interop.ole32_Dll_PInvokes.CoCreateInstance(
											pinned_clsid, 
											inner, 
											context, 
											pinned_uuid, 
											pinned_rReturnedComObject
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'kernel32.dll'
	/// </summary>
	public unsafe static partial class kernel32_dll
	{
		// Signature, LoadLibrary, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio.Core, Version=2.0.0.0, Culture=neutral, PublicKeyToken=e279aa5131008a41", "NAudio.Utils.NativeMethods", "LoadLibrary")]
		public static global::System.IntPtr LoadLibrary(string dllToLoad)
		{
			// Setup
			byte* unsafe_dllToLoad = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_dllToLoad = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(dllToLoad, true, false);
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.LoadLibrary(unsafe_dllToLoad);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_dllToLoad);
			}
		}

		// Signature, GetProcAddress, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio.Core, Version=2.0.0.0, Culture=neutral, PublicKeyToken=e279aa5131008a41", "NAudio.Utils.NativeMethods", "GetProcAddress")]
		public static global::System.IntPtr GetProcAddress(
					global::System.IntPtr hModule, 
					string procedureName)
		{
			// Setup
			byte* unsafe_procedureName = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_procedureName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(procedureName, true, false);
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetProcAddress(
									hModule, 
									unsafe_procedureName
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_procedureName);
			}
		}

		// Signature, FreeLibrary, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio.Core, Version=2.0.0.0, Culture=neutral, PublicKeyToken=e279aa5131008a41", "NAudio.Utils.NativeMethods", "FreeLibrary")]
		public static bool FreeLibrary(global::System.IntPtr hModule)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.FreeLibrary(hModule);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, DeleteFilePrivate, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "DeleteFilePrivate")]
		public static bool DeleteFilePrivate(string path)
		{
			// Setup
			ushort* unsafe_path = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_path = path)
			{
				unsafe_path = (ushort*)pinned_path;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.DeleteFilePrivate(unsafe_path);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, FindNextFile, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeFindHandle__System_IO_FileSystem____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem____Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FindNextFile")]
		public static bool FindNextFile(
					global::Microsoft.Win32.SafeHandles.SafeFindHandle__System_IO_FileSystem hndFindFile, 
					ref global::_.Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem lpFindFileData)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hndFindFile.DangerousAddRef(ref addRefed);
			fixed (global::_.Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem* pinned_lpFindFileData = &(lpFindFileData))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FindNextFile(
									hndFindFile.DangerousGetHandle(), 
									pinned_lpFindFileData
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				hndFindFile.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetCPInfoExW, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] __Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages___ptr__Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Text.Encoding.CodePages, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetCPInfoExW")]
		public static int GetCPInfoExW(
					uint CodePage, 
					uint dwFlags, 
					global::_.Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages* lpCPInfoEx)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetCPInfoExW(
								CodePage, 
								dwFlags, 
								((global::_.Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages*)lpCPInfoEx)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RemoveDirectoryPrivate, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "RemoveDirectoryPrivate")]
		public static bool RemoveDirectoryPrivate(string path)
		{
			// Setup
			ushort* unsafe_path = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_path = path)
			{
				unsafe_path = (ushort*)pinned_path;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.RemoveDirectoryPrivate(unsafe_path);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, FindFirstFileExPrivate, [fwd] [return] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeFindHandle__System_IO_FileSystem____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Kernel32_FINDEX_INFO_LEVELS__System_IO_FileSystem__Interop_Kernel32_FINDEX_INFO_LEVELS__System_IO_FileSystem, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem____Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Kernel32_FINDEX_SEARCH_OPS__System_IO_FileSystem__Interop_Kernel32_FINDEX_SEARCH_OPS__System_IO_FileSystem, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FindFirstFileExPrivate")]
		public static global::Microsoft.Win32.SafeHandles.SafeFindHandle__System_IO_FileSystem FindFirstFileExPrivate(
					string lpFileName, 
					global::_.Interop_Kernel32_FINDEX_INFO_LEVELS__System_IO_FileSystem fInfoLevelId, 
					ref global::_.Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem lpFindFileData, 
					global::_.Interop_Kernel32_FINDEX_SEARCH_OPS__System_IO_FileSystem fSearchOp, 
					global::System.IntPtr lpSearchFilter, 
					int dwAdditionalFlags)
		{
			// Setup
			ushort* unsafe_lpFileName = default(ushort*);
			global::Microsoft.Win32.SafeHandles.SafeFindHandle__System_IO_FileSystem __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (char* pinned_lpFileName = lpFileName)
			{
				unsafe_lpFileName = (ushort*)pinned_lpFileName;
				fixed (global::_.Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem* pinned_lpFindFileData = &(lpFindFileData))
				{
					__value = new global::Microsoft.Win32.SafeHandles.SafeFindHandle__System_IO_FileSystem();
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.kernel32_dll_PInvokes.FindFirstFileExPrivate(
										unsafe_lpFileName, 
										fInfoLevelId, 
										pinned_lpFindFileData, 
										fSearchOp, 
										lpSearchFilter, 
										dwAdditionalFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										__value, 
										unsafe___value
									);
				}
			}
			// Return
			return __value;
		}

		// Signature, DeleteVolumeMountPointPrivate, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "DeleteVolumeMountPointPrivate")]
		public static bool DeleteVolumeMountPointPrivate(string mountPoint)
		{
			// Setup
			ushort* unsafe_mountPoint = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_mountPoint = mountPoint)
			{
				unsafe_mountPoint = (ushort*)pinned_mountPoint;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.DeleteVolumeMountPointPrivate(unsafe_mountPoint);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, FindClose, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FindClose")]
		public static bool FindClose(global::System.IntPtr hFindFile)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.FindClose(hFindFile);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, SetThreadErrorMode, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "SetThreadErrorMode")]
		public static bool SetThreadErrorMode(
					uint dwNewMode, 
					out uint lpOldMode)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (uint* pinned_lpOldMode = &(lpOldMode))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.SetThreadErrorMode(
									dwNewMode, 
									pinned_lpOldMode
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetFileAttributesExPrivate, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Kernel32_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem__Interop_Kernel32_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem____Interop_Kernel32_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetFileAttributesExPrivate")]
		public static bool GetFileAttributesExPrivate(
					string name, 
					global::_.Interop_Kernel32_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem fileInfoLevel, 
					ref global::_.Interop_Kernel32_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem lpFileInformation)
		{
			// Setup
			ushort* unsafe_name = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_name = name)
			{
				unsafe_name = (ushort*)pinned_name;
				fixed (global::_.Interop_Kernel32_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem* pinned_lpFileInformation = &(lpFileInformation))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetFileAttributesExPrivate(
										unsafe_name, 
										fileInfoLevel, 
										pinned_lpFileInformation
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetStdHandle, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetStdHandle")]
		public static global::System.IntPtr GetStdHandle(int nStdHandle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetStdHandle(nStdHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, CloseHandle, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "CloseHandle")]
		public static bool CloseHandle(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.CloseHandle(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, FormatMessage, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					char* lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
			{
				unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									((ushort*)lpBuffer), 
									nSize, 
									unsafe_arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, WriteFile, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "WriteFile")]
		public static int WriteFile(
					global::System.IntPtr handle, 
					byte* bytes, 
					int numBytesToWrite, 
					out int numBytesWritten, 
					global::System.IntPtr mustBeZero)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_numBytesWritten = &(numBytesWritten))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.WriteFile(
									handle, 
									((byte*)bytes), 
									numBytesToWrite, 
									pinned_numBytesWritten, 
									mustBeZero
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, GetFileType, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetFileType")]
		public static uint GetFileType(global::System.IntPtr hFile)
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetFileType(hFile);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, GetConsoleOutputCP, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetConsoleOutputCP")]
		public static uint GetConsoleOutputCP()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetConsoleOutputCP();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, ReadFile, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "ReadFile")]
		public static int ReadFile(
					global::System.IntPtr handle, 
					byte* bytes, 
					int numBytesToRead, 
					out int numBytesRead, 
					global::System.IntPtr mustBeZero)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_numBytesRead = &(numBytesRead))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.ReadFile(
									handle, 
									((byte*)bytes), 
									numBytesToRead, 
									pinned_numBytesRead, 
									mustBeZero
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, ReadConsole, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "ReadConsole")]
		public static bool ReadConsole(
					global::System.IntPtr hConsoleInput, 
					byte* lpBuffer, 
					int nNumberOfCharsToRead, 
					out int lpNumberOfCharsRead, 
					global::System.IntPtr pInputControl)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_lpNumberOfCharsRead = &(lpNumberOfCharsRead))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.ReadConsole(
									hConsoleInput, 
									((byte*)lpBuffer), 
									nNumberOfCharsToRead, 
									pinned_lpNumberOfCharsRead, 
									pInputControl
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, WriteConsole, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "WriteConsole")]
		public static bool WriteConsole(
					global::System.IntPtr hConsoleOutput, 
					byte* lpBuffer, 
					int nNumberOfCharsToWrite, 
					out int lpNumberOfCharsWritten, 
					global::System.IntPtr lpReservedMustBeNull)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_lpNumberOfCharsWritten = &(lpNumberOfCharsWritten))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.WriteConsole(
									hConsoleOutput, 
									((byte*)lpBuffer), 
									nNumberOfCharsToWrite, 
									pinned_lpNumberOfCharsWritten, 
									lpReservedMustBeNull
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetFileInformationByHandleEx, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Kernel32_FILE_INFO_BY_HANDLE_CLASS__System_IO_FileSystem__Interop_Kernel32_FILE_INFO_BY_HANDLE_CLASS__System_IO_FileSystem, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetFileInformationByHandleEx")]
		public static bool GetFileInformationByHandleEx(
					global::System.IntPtr hFile, 
					global::_.Interop_Kernel32_FILE_INFO_BY_HANDLE_CLASS__System_IO_FileSystem FileInformationClass, 
					global::System.IntPtr lpFileInformation, 
					uint dwBufferSize)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetFileInformationByHandleEx(
								hFile, 
								FileInformationClass, 
								lpFileInformation, 
								dwBufferSize
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, FormatMessage__0, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.Win32.Registry, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage__0(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					void* lpBuffer, 
					int nSize, 
					global::System.IntPtr arguments)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__0(
								dwFlags, 
								lpSource, 
								dwMessageId, 
								dwLanguageId, 
								((void*)lpBuffer), 
								nSize, 
								arguments
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, CreateFile2, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] System_IO_FileShare__System_Private_CoreLib__FileShare__System_Private_CoreLib, [fwd] [in] [EETypeRva:0x00042D60] System_IO_FileMode__System_Private_CoreLib__FileMode__System_Private_CoreLib, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_CREATEFILE2_EXTENDED_PARAMETERS__System_IO_FileSystem____Interop_Kernel32_CREATEFILE2_EXTENDED_PARAMETERS__System_IO_FileSystem, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "CreateFile2")]
		public static global::System.IntPtr CreateFile2(
					string lpFileName, 
					int dwDesiredAccess, 
					global::System_IO.FileShare__System_Private_CoreLib dwShareMode, 
					global::System_IO.FileMode__System_Private_CoreLib dwCreationDisposition, 
					ref global::_.Interop_Kernel32_CREATEFILE2_EXTENDED_PARAMETERS__System_IO_FileSystem parameters)
		{
			// Setup
			ushort* unsafe_lpFileName = default(ushort*);
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (char* pinned_lpFileName = lpFileName)
			{
				unsafe_lpFileName = (ushort*)pinned_lpFileName;
				fixed (global::_.Interop_Kernel32_CREATEFILE2_EXTENDED_PARAMETERS__System_IO_FileSystem* pinned_parameters = &(parameters))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.kernel32_dll_PInvokes.CreateFile2(
										unsafe_lpFileName, 
										dwDesiredAccess, 
										dwShareMode, 
										dwCreationDisposition, 
										pinned_parameters
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, GetConsoleCP, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetConsoleCP")]
		public static uint GetConsoleCP()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetConsoleCP();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, WideCharToMultiByte, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "WideCharToMultiByte")]
		public static int WideCharToMultiByte(
					uint CodePage, 
					uint dwFlags, 
					char* lpWideCharStr, 
					int cchWideChar, 
					byte* lpMultiByteStr, 
					int cbMultiByte, 
					global::System.IntPtr lpDefaultChar, 
					global::System.IntPtr lpUsedDefaultChar)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.WideCharToMultiByte(
								CodePage, 
								dwFlags, 
								((ushort*)lpWideCharStr), 
								cchWideChar, 
								((byte*)lpMultiByteStr), 
								cbMultiByte, 
								lpDefaultChar, 
								lpUsedDefaultChar
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MultiByteToWideChar, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "MultiByteToWideChar")]
		public static int MultiByteToWideChar(
					uint CodePage, 
					uint dwFlags, 
					byte* lpMultiByteStr, 
					int cbMultiByte, 
					char* lpWideCharStr, 
					int cchWideChar)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.MultiByteToWideChar(
								CodePage, 
								dwFlags, 
								((byte*)lpMultiByteStr), 
								cbMultiByte, 
								((ushort*)lpWideCharStr), 
								cchWideChar
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, GetCPInfoExW__0, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] __Interop_Kernel32_CPINFOEXW__System_Console___ptr__Interop_Kernel32_CPINFOEXW__System_Console *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetCPInfoExW")]
		public static int GetCPInfoExW__0(
					uint CodePage, 
					uint dwFlags, 
					global::_.Interop_Kernel32_CPINFOEXW__System_Console* lpCPInfoEx)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetCPInfoExW__0(
								CodePage, 
								dwFlags, 
								((global::_.Interop_Kernel32_CPINFOEXW__System_Console*)lpCPInfoEx)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, GetConsoleMode, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetConsoleMode")]
		public static bool GetConsoleMode(
					global::System.IntPtr handle, 
					out int mode)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_mode = &(mode))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetConsoleMode(
									handle, 
									pinned_mode
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, FormatMessage__1, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage__1(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					char* lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
			{
				unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__1(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									((ushort*)lpBuffer), 
									nSize, 
									unsafe_arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'dsound.dll'
	/// </summary>
	public unsafe static partial class dsound_dll
	{
		// Signature, DirectSoundCreate, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_Guid__System.Guid, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00043660] NAudio_Wave_DirectSoundOut_IDirectSound__NAudio_Core__NAudio_Wave_DirectSoundOut__IDirectSound__NAudio_Core *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio.Core, Version=2.0.0.0, Culture=neutral, PublicKeyToken=e279aa5131008a41", "NAudio.Wave.DirectSoundOut", "DirectSoundCreate")]
		public static void DirectSoundCreate(
					ref global::System.Guid GUID, 
					out global::NAudio_Wave_DirectSoundOut.IDirectSound__NAudio_Core directSound, 
					global::System.IntPtr pUnkOuter)
		{
			// Setup
			void* unsafe_directSound = default(void*);
			try
			{
				// Marshalling
				fixed (global::System.Guid* pinned_GUID = &(GUID))
				{
					unsafe_directSound = null;
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					global::__Interop.dsound_dll_PInvokes.DirectSoundCreate(
										pinned_GUID, 
										&(unsafe_directSound), 
										pUnkOuter
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					directSound = (global::NAudio_Wave_DirectSoundOut.IDirectSound__NAudio_Core)global::System.Runtime.InteropServices.McgMarshal.ComInterfaceToObject(
										((global::System.IntPtr)unsafe_directSound), 
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.Wave.DirectSoundOut+IDirectSound,NAudio.Core, Version=2.0.0.0, Culture=neutral, PublicKeyToken=e279aa5131" +
												"008a41")
									);
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_directSound)));
			}
		}

		// Signature, DirectSoundEnumerate, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x00041EA8] NAudio_Wave_DirectSoundOut_DSEnumCallback__NAudio_Core__NAudio_Wave__DirectSoundOut_DSEnumCallback__NAudio_Core, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio.Core, Version=2.0.0.0, Culture=neutral, PublicKeyToken=e279aa5131008a41", "NAudio.Wave.DirectSoundOut", "DirectSoundEnumerate")]
		public static void DirectSoundEnumerate(
					global::NAudio.Wave.DirectSoundOut_DSEnumCallback__NAudio_Core lpDSEnumCallback, 
					global::System.IntPtr lpContext)
		{
			// Setup
			void* unsafe_lpDSEnumCallback = default(void*);
			try
			{
				// Marshalling
				unsafe_lpDSEnumCallback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("NAudio.Wave.DirectSoundOut+DSEnumCallback,NAudio.Core, Version=2.0.0.0, Culture=neutral, PublicKeyToken=e279aa51" +
											"31008a41"), 
									lpDSEnumCallback
								);
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				global::__Interop.dsound_dll_PInvokes.DirectSoundEnumerate(
									unsafe_lpDSEnumCallback, 
									lpContext
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(lpDSEnumCallback);
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'user32.dll'
	/// </summary>
	public unsafe static partial class user32_dll
	{
		// Signature, GetDesktopWindow, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("NAudio.Core, Version=2.0.0.0, Culture=neutral, PublicKeyToken=e279aa5131008a41", "NAudio.Wave.DirectSoundOut", "GetDesktopWindow")]
		public static global::System.IntPtr GetDesktopWindow()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.user32_dll_PInvokes.GetDesktopWindow();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module '[MRT]'
	/// </summary>
	public unsafe static partial class _MRT_
	{
		// Signature, RhpGetFuncEvalParameterBufferSize, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpGetFuncEvalParameterBufferSize")]
		public static uint RhpGetFuncEvalParameterBufferSize()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhpGetFuncEvalParameterBufferSize();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhpGetFuncEvalMode, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpGetFuncEvalMode")]
		public static uint RhpGetFuncEvalMode()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhpGetFuncEvalMode();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhpRecordDebuggeeInitiatedHandle, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpRecordDebuggeeInitiatedHandle")]
		public static uint RhpRecordDebuggeeInitiatedHandle(void* objectHandle)
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhpRecordDebuggeeInitiatedHandle(((void*)objectHandle));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhpVerifyDebuggerCleanup, [fwd] [return] [EETypeRva:0x00041F6C] void__void, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpVerifyDebuggerCleanup")]
		public static void RhpVerifyDebuggerCleanup()
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.RhpVerifyDebuggerCleanup();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, RhpGetCurrentThread, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpGetCurrentThread")]
		public static global::System.IntPtr RhpGetCurrentThread()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhpGetCurrentThread();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhWaitForPendingFinalizers, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhWaitForPendingFinalizers")]
		public static void RhWaitForPendingFinalizers(int allowReentrantWait)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.RhWaitForPendingFinalizers(allowReentrantWait);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, _RhYield, [fwd] [return] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "_RhYield")]
		public static int _RhYield()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes._RhYield();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhFlushProcessWriteBuffers, [fwd] [return] [EETypeRva:0x00041F6C] void__void, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhFlushProcessWriteBuffers")]
		public static void RhFlushProcessWriteBuffers()
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.RhFlushProcessWriteBuffers();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, RhCompatibleReentrantWaitAny, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr___ptr__w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhCompatibleReentrantWaitAny")]
		public static int RhCompatibleReentrantWaitAny(
					int alertable, 
					int timeout, 
					int count, 
					global::System.IntPtr* handles)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhCompatibleReentrantWaitAny(
								alertable, 
								timeout, 
								count, 
								((global::System.IntPtr*)handles)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhCallDescrWorkerNative, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhCallDescrWorkerNative")]
		public static void RhCallDescrWorkerNative(global::System.IntPtr callDescr)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.RhCallDescrWorkerNative(callDescr);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, _ecvt_s, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int___ptrint *, [fwd] [in] [EETypeRva:0x000419B0] int___ptrint *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "_ecvt_s")]
		public static void _ecvt_s(
					byte* buffer, 
					int sizeInBytes, 
					double value, 
					int count, 
					int* dec, 
					int* sign)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes._ecvt_s(
								((byte*)buffer), 
								sizeInBytes, 
								value, 
								count, 
								((int*)dec), 
								((int*)sign)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, memmove, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "memmove")]
		public static void memmove(
					byte* dmem, 
					byte* smem, 
					ulong size)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.memmove(
								((byte*)dmem), 
								((byte*)smem), 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, memset, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "memset")]
		public static void memset(
					byte* mem, 
					int value, 
					ulong size)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.memset(
								((byte*)mem), 
								value, 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module '*'
	/// </summary>
	public unsafe static partial class _
	{
		// Signature, CallingConventionConverter_GetStubs, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.TypeLoader, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.Runtime.TypeLoader.CallConverterThunk", "CallingConventionConverter_GetStubs")]
		public static void CallingConventionConverter_GetStubs(
					out global::System.IntPtr returnVoidStub, 
					out global::System.IntPtr returnIntegerStub, 
					out global::System.IntPtr commonStub)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_returnVoidStub = &(returnVoidStub))
				fixed (global::System.IntPtr* pinned_returnIntegerStub = &(returnIntegerStub))
					fixed (global::System.IntPtr* pinned_commonStub = &(commonStub))
					{
						// Call to native method
						global::__Interop.__PInvokes.CallingConventionConverter_GetStubs(
											pinned_returnVoidStub, 
											pinned_returnIntegerStub, 
											pinned_commonStub
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-string-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_string_l1_1_0_dll
	{
		// Signature, WindowsCreateStringReference, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_Runtime_InteropServices_HSTRING_HEADER__System_Private_Interop___ptrSystem_Runtime_InteropServices__HSTRING_HEADER__System_Private_Interop *, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore", "WindowsCreateStringReference")]
		public static int WindowsCreateStringReference(
					char* sourceString, 
					uint length, 
					global::System_Runtime_InteropServices.HSTRING_HEADER__System_Private_Interop* phstringHeader, 
					void* hstring)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_winrt_string_l1_1_0_dll_PInvokes.WindowsCreateStringReference(
								((ushort*)sourceString), 
								length, 
								((global::System_Runtime_InteropServices.HSTRING_HEADER__System_Private_Interop*)phstringHeader), 
								((void*)hstring)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-errorhandling-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_errorhandling_l1_1_0_dll
	{
		// Signature, GetLastError, [fwd] [return] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetLastError")]
		public static int GetLastError()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes.GetLastError();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, SetLastError, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "SetLastError")]
		public static void SetLastError(uint dwErrCode)
		{
			// Marshalling
			// Call to native method
			global::__Interop.api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes.SetLastError(dwErrCode);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_l1_1_0_dll
	{
		// Signature, RoInitialize, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "RoInitialize")]
		public static int RoInitialize(uint initType)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_winrt_l1_1_0_dll_PInvokes.RoInitialize(initType);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-localization-l1-2-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_localization_l1_2_0_dll
	{
		// Signature, IsValidLocaleName, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "IsValidLocaleName")]
		public static int IsValidLocaleName(char* lpLocaleName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.IsValidLocaleName(((ushort*)lpLocaleName));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResolveLocaleName, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "ResolveLocaleName")]
		public static int ResolveLocaleName(
					char* lpNameToResolve, 
					char* lpLocaleName, 
					int cchLocaleName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.ResolveLocaleName(
								((ushort*)lpNameToResolve), 
								((ushort*)lpLocaleName), 
								cchLocaleName
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-com-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_com_l1_1_0_dll
	{
		// Signature, CoCreateInstance, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.StackTraceGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.StackTraceGenerator.StackTraceGenerator", "CoCreateInstance")]
		public static int CoCreateInstance(
					byte* rclsid, 
					global::System.IntPtr pUnkOuter, 
					int dwClsContext, 
					byte* riid, 
					out global::System.IntPtr ppv)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_ppv = &(ppv))
			{
				// Call to native method
				unsafe___value = global::__Interop.api_ms_win_core_com_l1_1_0_dll_PInvokes.CoCreateInstance(
									((byte*)rclsid), 
									pUnkOuter, 
									dwClsContext, 
									((byte*)riid), 
									pinned_ppv
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'advapi32.dll'
	/// </summary>
	public unsafe static partial class advapi32_dll
	{
		// Signature, RegCloseKey, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.Win32.Registry, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "RegCloseKey")]
		public static int RegCloseKey(global::System.IntPtr hKey)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.RegCloseKey(hKey);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RegEnumKeyEx, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeRegistryHandle__Microsoft_Win32_Registry____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_char__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_int__int *, [fwd] [out] [EETypeRva:0x00042A40] rg_char__wchar_t *, [fwd] [in] [EETypeRva:0x00042A40] rg_int__int *, [fwd] [in] [EETypeRva:0x00042A40] rg_long____int64 *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.Win32.Registry, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "RegEnumKeyEx")]
		public static int RegEnumKeyEx(
					global::Microsoft.Win32.SafeHandles.SafeRegistryHandle__Microsoft_Win32_Registry hKey, 
					int dwIndex, 
					char[] lpName, 
					ref int lpcbName, 
					int[] lpReserved, 
					char[] lpClass, 
					int[] lpcbClass, 
					long[] lpftLastWriteTime)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_lpName;
			int* unsafe_lpReserved;
			ushort* unsafe_lpClass;
			int* unsafe_lpcbClass;
			long* unsafe_lpftLastWriteTime;
			int unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			fixed (char* pinned_lpName = ((lpName != null 
						&& lpName.Length == 0) ? new char[1] : lpName))
			{
				unsafe_lpName = (ushort*)pinned_lpName;
				fixed (int* pinned_lpcbName = &(lpcbName))
					fixed (int* pinned_lpReserved = ((lpReserved != null 
								&& lpReserved.Length == 0) ? new int[1] : lpReserved))
					{
						unsafe_lpReserved = (int*)pinned_lpReserved;
						fixed (char* pinned_lpClass = ((lpClass != null 
									&& lpClass.Length == 0) ? new char[1] : lpClass))
						{
							unsafe_lpClass = (ushort*)pinned_lpClass;
							fixed (int* pinned_lpcbClass = ((lpcbClass != null 
										&& lpcbClass.Length == 0) ? new int[1] : lpcbClass))
							{
								unsafe_lpcbClass = (int*)pinned_lpcbClass;
								fixed (long* pinned_lpftLastWriteTime = ((lpftLastWriteTime != null 
											&& lpftLastWriteTime.Length == 0) ? new long[1] : lpftLastWriteTime))
								{
									unsafe_lpftLastWriteTime = (long*)pinned_lpftLastWriteTime;
									// Call to native method
									unsafe___value = global::__Interop.advapi32_dll_PInvokes.RegEnumKeyEx(
														hKey.DangerousGetHandle(), 
														dwIndex, 
														unsafe_lpName, 
														pinned_lpcbName, 
														unsafe_lpReserved, 
														unsafe_lpClass, 
														unsafe_lpcbClass, 
														unsafe_lpftLastWriteTime
													);
									global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
								}
							}
						}
					}
			}
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, RegOpenKeyEx, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeRegistryHandle__Microsoft_Win32_Registry____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeRegistryHandle__Microsoft_Win32_Registry____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.Win32.Registry, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "RegOpenKeyEx")]
		public static int RegOpenKeyEx(
					global::Microsoft.Win32.SafeHandles.SafeRegistryHandle__Microsoft_Win32_Registry hKey, 
					string lpSubKey, 
					int ulOptions, 
					int samDesired, 
					out global::Microsoft.Win32.SafeHandles.SafeRegistryHandle__Microsoft_Win32_Registry hkResult)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_lpSubKey = default(ushort*);
			global::System.IntPtr unsafe_hkResult;
			int unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			fixed (char* pinned_lpSubKey = lpSubKey)
			{
				unsafe_lpSubKey = (ushort*)pinned_lpSubKey;
				hkResult = new global::Microsoft.Win32.SafeHandles.SafeRegistryHandle__Microsoft_Win32_Registry();
				unsafe_hkResult = hkResult.DangerousGetHandle();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.RegOpenKeyEx(
									hKey.DangerousGetHandle(), 
									unsafe_lpSubKey, 
									ulOptions, 
									samDesired, 
									&(unsafe_hkResult)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									hkResult, 
									unsafe_hkResult
								);
			}
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, RegQueryInfoKey, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeRegistryHandle__Microsoft_Win32_Registry____w64 int, [fwd] [out] [EETypeRva:0x00042A40] rg_char__wchar_t *, [fwd] [in] [EETypeRva:0x00042A40] rg_int__int *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_int__int *, [fwd] [in] [EETypeRva:0x00042A40] rg_int__int *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_int__int *, [fwd] [in] [EETypeRva:0x00042A40] rg_int__int *, [fwd] [in] [EETypeRva:0x00042A40] rg_int__int *, [fwd] [in] [EETypeRva:0x00042A40] rg_int__int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.Win32.Registry, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "RegQueryInfoKey")]
		public static int RegQueryInfoKey(
					global::Microsoft.Win32.SafeHandles.SafeRegistryHandle__Microsoft_Win32_Registry hKey, 
					char[] lpClass, 
					int[] lpcbClass, 
					global::System.IntPtr lpReserved_MustBeZero, 
					ref int lpcSubKeys, 
					int[] lpcbMaxSubKeyLen, 
					int[] lpcbMaxClassLen, 
					ref int lpcValues, 
					int[] lpcbMaxValueNameLen, 
					int[] lpcbMaxValueLen, 
					int[] lpcbSecurityDescriptor, 
					int[] lpftLastWriteTime)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_lpClass;
			int* unsafe_lpcbClass;
			int* unsafe_lpcbMaxSubKeyLen;
			int* unsafe_lpcbMaxClassLen;
			int* unsafe_lpcbMaxValueNameLen;
			int* unsafe_lpcbMaxValueLen;
			int* unsafe_lpcbSecurityDescriptor;
			int* unsafe_lpftLastWriteTime;
			int unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			fixed (char* pinned_lpClass = ((lpClass != null 
						&& lpClass.Length == 0) ? new char[1] : lpClass))
			{
				unsafe_lpClass = (ushort*)pinned_lpClass;
				fixed (int* pinned_lpcbClass = ((lpcbClass != null 
							&& lpcbClass.Length == 0) ? new int[1] : lpcbClass))
				{
					unsafe_lpcbClass = (int*)pinned_lpcbClass;
					fixed (int* pinned_lpcSubKeys = &(lpcSubKeys))
						fixed (int* pinned_lpcbMaxSubKeyLen = ((lpcbMaxSubKeyLen != null 
									&& lpcbMaxSubKeyLen.Length == 0) ? new int[1] : lpcbMaxSubKeyLen))
						{
							unsafe_lpcbMaxSubKeyLen = (int*)pinned_lpcbMaxSubKeyLen;
							fixed (int* pinned_lpcbMaxClassLen = ((lpcbMaxClassLen != null 
										&& lpcbMaxClassLen.Length == 0) ? new int[1] : lpcbMaxClassLen))
							{
								unsafe_lpcbMaxClassLen = (int*)pinned_lpcbMaxClassLen;
								fixed (int* pinned_lpcValues = &(lpcValues))
									fixed (int* pinned_lpcbMaxValueNameLen = ((lpcbMaxValueNameLen != null 
												&& lpcbMaxValueNameLen.Length == 0) ? new int[1] : lpcbMaxValueNameLen))
									{
										unsafe_lpcbMaxValueNameLen = (int*)pinned_lpcbMaxValueNameLen;
										fixed (int* pinned_lpcbMaxValueLen = ((lpcbMaxValueLen != null 
													&& lpcbMaxValueLen.Length == 0) ? new int[1] : lpcbMaxValueLen))
										{
											unsafe_lpcbMaxValueLen = (int*)pinned_lpcbMaxValueLen;
											fixed (int* pinned_lpcbSecurityDescriptor = ((lpcbSecurityDescriptor != null 
														&& lpcbSecurityDescriptor.Length == 0) ? new int[1] : lpcbSecurityDescriptor))
											{
												unsafe_lpcbSecurityDescriptor = (int*)pinned_lpcbSecurityDescriptor;
												fixed (int* pinned_lpftLastWriteTime = ((lpftLastWriteTime != null 
															&& lpftLastWriteTime.Length == 0) ? new int[1] : lpftLastWriteTime))
												{
													unsafe_lpftLastWriteTime = (int*)pinned_lpftLastWriteTime;
													// Call to native method
													unsafe___value = global::__Interop.advapi32_dll_PInvokes.RegQueryInfoKey(
																		hKey.DangerousGetHandle(), 
																		unsafe_lpClass, 
																		unsafe_lpcbClass, 
																		lpReserved_MustBeZero, 
																		pinned_lpcSubKeys, 
																		unsafe_lpcbMaxSubKeyLen, 
																		unsafe_lpcbMaxClassLen, 
																		pinned_lpcValues, 
																		unsafe_lpcbMaxValueNameLen, 
																		unsafe_lpcbMaxValueLen, 
																		unsafe_lpcbSecurityDescriptor, 
																		unsafe_lpftLastWriteTime
																	);
													global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
												}
											}
										}
									}
							}
						}
				}
			}
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, RegQueryValueEx, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeRegistryHandle__Microsoft_Win32_Registry____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00042A40] rg_int__int *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [out] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.Win32.Registry, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "RegQueryValueEx")]
		public static int RegQueryValueEx(
					global::Microsoft.Win32.SafeHandles.SafeRegistryHandle__Microsoft_Win32_Registry hKey, 
					string lpValueName, 
					int[] lpReserved, 
					ref int lpType, 
					byte[] lpData, 
					ref int lpcbData)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_lpValueName = default(ushort*);
			int* unsafe_lpReserved;
			byte* unsafe_lpData;
			int unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			fixed (char* pinned_lpValueName = lpValueName)
			{
				unsafe_lpValueName = (ushort*)pinned_lpValueName;
				fixed (int* pinned_lpReserved = ((lpReserved != null 
							&& lpReserved.Length == 0) ? new int[1] : lpReserved))
				{
					unsafe_lpReserved = (int*)pinned_lpReserved;
					fixed (int* pinned_lpType = &(lpType))
						fixed (byte* pinned_lpData = ((lpData != null 
									&& lpData.Length == 0) ? new byte[1] : lpData))
						{
							unsafe_lpData = (byte*)pinned_lpData;
							fixed (int* pinned_lpcbData = &(lpcbData))
							{
								// Call to native method
								unsafe___value = global::__Interop.advapi32_dll_PInvokes.RegQueryValueEx(
													hKey.DangerousGetHandle(), 
													unsafe_lpValueName, 
													unsafe_lpReserved, 
													pinned_lpType, 
													unsafe_lpData, 
													pinned_lpcbData
												);
								global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
							}
						}
				}
			}
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, RegQueryValueEx__0, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeRegistryHandle__Microsoft_Win32_Registry____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00042A40] rg_int__int *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] long____int64, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.Win32.Registry, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "RegQueryValueEx")]
		public static int RegQueryValueEx__0(
					global::Microsoft.Win32.SafeHandles.SafeRegistryHandle__Microsoft_Win32_Registry hKey, 
					string lpValueName, 
					int[] lpReserved, 
					ref int lpType, 
					ref long lpData, 
					ref int lpcbData)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_lpValueName = default(ushort*);
			int* unsafe_lpReserved;
			int unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			fixed (char* pinned_lpValueName = lpValueName)
			{
				unsafe_lpValueName = (ushort*)pinned_lpValueName;
				fixed (int* pinned_lpReserved = ((lpReserved != null 
							&& lpReserved.Length == 0) ? new int[1] : lpReserved))
				{
					unsafe_lpReserved = (int*)pinned_lpReserved;
					fixed (int* pinned_lpType = &(lpType))
						fixed (long* pinned_lpData = &(lpData))
							fixed (int* pinned_lpcbData = &(lpcbData))
							{
								// Call to native method
								unsafe___value = global::__Interop.advapi32_dll_PInvokes.RegQueryValueEx__0(
													hKey.DangerousGetHandle(), 
													unsafe_lpValueName, 
													unsafe_lpReserved, 
													pinned_lpType, 
													pinned_lpData, 
													pinned_lpcbData
												);
								global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
							}
				}
			}
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, RegQueryValueEx__1, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeRegistryHandle__Microsoft_Win32_Registry____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00042A40] rg_int__int *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.Win32.Registry, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "RegQueryValueEx")]
		public static int RegQueryValueEx__1(
					global::Microsoft.Win32.SafeHandles.SafeRegistryHandle__Microsoft_Win32_Registry hKey, 
					string lpValueName, 
					int[] lpReserved, 
					ref int lpType, 
					ref int lpData, 
					ref int lpcbData)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_lpValueName = default(ushort*);
			int* unsafe_lpReserved;
			int unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			fixed (char* pinned_lpValueName = lpValueName)
			{
				unsafe_lpValueName = (ushort*)pinned_lpValueName;
				fixed (int* pinned_lpReserved = ((lpReserved != null 
							&& lpReserved.Length == 0) ? new int[1] : lpReserved))
				{
					unsafe_lpReserved = (int*)pinned_lpReserved;
					fixed (int* pinned_lpType = &(lpType))
						fixed (int* pinned_lpData = &(lpData))
							fixed (int* pinned_lpcbData = &(lpcbData))
							{
								// Call to native method
								unsafe___value = global::__Interop.advapi32_dll_PInvokes.RegQueryValueEx__1(
													hKey.DangerousGetHandle(), 
													unsafe_lpValueName, 
													unsafe_lpReserved, 
													pinned_lpType, 
													pinned_lpData, 
													pinned_lpcbData
												);
								global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
							}
				}
			}
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, RegQueryValueEx__2, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeRegistryHandle__Microsoft_Win32_Registry____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00042A40] rg_int__int *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [out] [EETypeRva:0x00042A40] rg_char__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.Win32.Registry, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "RegQueryValueEx")]
		public static int RegQueryValueEx__2(
					global::Microsoft.Win32.SafeHandles.SafeRegistryHandle__Microsoft_Win32_Registry hKey, 
					string lpValueName, 
					int[] lpReserved, 
					ref int lpType, 
					char[] lpData, 
					ref int lpcbData)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_lpValueName = default(ushort*);
			int* unsafe_lpReserved;
			ushort* unsafe_lpData;
			int unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			fixed (char* pinned_lpValueName = lpValueName)
			{
				unsafe_lpValueName = (ushort*)pinned_lpValueName;
				fixed (int* pinned_lpReserved = ((lpReserved != null 
							&& lpReserved.Length == 0) ? new int[1] : lpReserved))
				{
					unsafe_lpReserved = (int*)pinned_lpReserved;
					fixed (int* pinned_lpType = &(lpType))
						fixed (char* pinned_lpData = ((lpData != null 
									&& lpData.Length == 0) ? new char[1] : lpData))
						{
							unsafe_lpData = (ushort*)pinned_lpData;
							fixed (int* pinned_lpcbData = &(lpcbData))
							{
								// Call to native method
								unsafe___value = global::__Interop.advapi32_dll_PInvokes.RegQueryValueEx__2(
													hKey.DangerousGetHandle(), 
													unsafe_lpValueName, 
													unsafe_lpReserved, 
													pinned_lpType, 
													unsafe_lpData, 
													pinned_lpcbData
												);
								global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
							}
						}
				}
			}
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'OleAut32'
	/// </summary>
	public unsafe static partial class OleAut32
	{
		// Signature, SysFreeString, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.StackTraceGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.LightweightInterop.MarshalExtensions", "SysFreeString")]
		public static void SysFreeString(global::System.IntPtr bstr)
		{
			// Marshalling
			// Call to native method
			global::__Interop.OleAut32_PInvokes.SysFreeString(bstr);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-robuffer-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_robuffer_l1_1_0_dll
	{
		// Signature, RoGetBufferMarshaler, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00043660] System_Runtime_InteropServices_IMarshal__System_Runtime_WindowsRuntime__System_Runtime_InteropServices__IMarshal__System_Runtime_WindowsRuntime *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Runtime.WindowsRuntime, Version=4.0.14.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "Interop+mincore", "RoGetBufferMarshaler")]
		public static int RoGetBufferMarshaler(out global::System_Runtime_InteropServices.IMarshal__System_Runtime_WindowsRuntime bufferMarshalerPtr)
		{
			// Setup
			void* unsafe_bufferMarshalerPtr = default(void*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_bufferMarshalerPtr = null;
				// Call to native method
				unsafe___value = global::__Interop.api_ms_win_core_winrt_robuffer_l1_1_0_dll_PInvokes.RoGetBufferMarshaler(&(unsafe_bufferMarshalerPtr));
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				bufferMarshalerPtr = (global::System_Runtime_InteropServices.IMarshal__System_Runtime_WindowsRuntime)global::System.Runtime.InteropServices.McgMarshal.ComInterfaceToObject(
									((global::System.IntPtr)unsafe_bufferMarshalerPtr), 
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("System.Runtime.InteropServices.IMarshal,System.Runtime.WindowsRuntime, Version=4.0.14.0, Culture=neutral, Public" +
											"KeyToken=b77a5c561934e089")
								);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_bufferMarshalerPtr)));
			}
		}
	}

	public unsafe static partial class ole32_Dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("ole32.Dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CoCreateInstance(
					global::System.Guid* clsid, 
					global::System.IntPtr inner, 
					uint context, 
					global::System.Guid* uuid, 
					global::System.IntPtr* rReturnedComObject);
	}

	public unsafe static partial class kernel32_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="LoadLibraryA", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr LoadLibrary(byte* dllToLoad);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr GetProcAddress(
					global::System.IntPtr hModule, 
					byte* procedureName);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FreeLibrary(global::System.IntPtr hModule);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="DeleteFileW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DeleteFilePrivate(ushort* path);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FindNextFileW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FindNextFile(
					global::System.IntPtr hndFindFile, 
					global::_.Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem* lpFindFileData);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetCPInfoExW(
					uint CodePage, 
					uint dwFlags, 
					global::_.Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages* lpCPInfoEx);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="RemoveDirectoryW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RemoveDirectoryPrivate(ushort* path);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FindFirstFileExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr FindFirstFileExPrivate(
					ushort* lpFileName, 
					global::_.Interop_Kernel32_FINDEX_INFO_LEVELS__System_IO_FileSystem fInfoLevelId, 
					global::_.Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem* lpFindFileData, 
					global::_.Interop_Kernel32_FINDEX_SEARCH_OPS__System_IO_FileSystem fSearchOp, 
					global::System.IntPtr lpSearchFilter, 
					int dwAdditionalFlags);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="DeleteVolumeMountPointW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DeleteVolumeMountPointPrivate(ushort* mountPoint);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FindClose(global::System.IntPtr hFindFile);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int SetThreadErrorMode(
					uint dwNewMode, 
					uint* lpOldMode);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="GetFileAttributesExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetFileAttributesExPrivate(
					ushort* name, 
					global::_.Interop_Kernel32_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem fileInfoLevel, 
					global::_.Interop_Kernel32_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem* lpFileInformation);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr GetStdHandle(int nStdHandle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CloseHandle(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WriteFile(
					global::System.IntPtr handle, 
					byte* bytes, 
					int numBytesToWrite, 
					int* numBytesWritten, 
					global::System.IntPtr mustBeZero);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint GetFileType(global::System.IntPtr hFile);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint GetConsoleOutputCP();

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ReadFile(
					global::System.IntPtr handle, 
					byte* bytes, 
					int numBytesToRead, 
					int* numBytesRead, 
					global::System.IntPtr mustBeZero);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="ReadConsoleW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ReadConsole(
					global::System.IntPtr hConsoleInput, 
					byte* lpBuffer, 
					int nNumberOfCharsToRead, 
					int* lpNumberOfCharsRead, 
					global::System.IntPtr pInputControl);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="WriteConsoleW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WriteConsole(
					global::System.IntPtr hConsoleOutput, 
					byte* lpBuffer, 
					int nNumberOfCharsToWrite, 
					int* lpNumberOfCharsWritten, 
					global::System.IntPtr lpReservedMustBeNull);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetFileInformationByHandleEx(
					global::System.IntPtr hFile, 
					global::_.Interop_Kernel32_FILE_INFO_BY_HANDLE_CLASS__System_IO_FileSystem FileInformationClass, 
					global::System.IntPtr lpFileInformation, 
					uint dwBufferSize);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__0(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					void* lpBuffer, 
					int nSize, 
					global::System.IntPtr arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CreateFile2(
					ushort* lpFileName, 
					int dwDesiredAccess, 
					global::System_IO.FileShare__System_Private_CoreLib dwShareMode, 
					global::System_IO.FileMode__System_Private_CoreLib dwCreationDisposition, 
					global::_.Interop_Kernel32_CREATEFILE2_EXTENDED_PARAMETERS__System_IO_FileSystem* parameters);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint GetConsoleCP();

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WideCharToMultiByte(
					uint CodePage, 
					uint dwFlags, 
					ushort* lpWideCharStr, 
					int cchWideChar, 
					byte* lpMultiByteStr, 
					int cbMultiByte, 
					global::System.IntPtr lpDefaultChar, 
					global::System.IntPtr lpUsedDefaultChar);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int MultiByteToWideChar(
					uint CodePage, 
					uint dwFlags, 
					byte* lpMultiByteStr, 
					int cbMultiByte, 
					ushort* lpWideCharStr, 
					int cchWideChar);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="GetCPInfoExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetCPInfoExW__0(
					uint CodePage, 
					uint dwFlags, 
					global::_.Interop_Kernel32_CPINFOEXW__System_Console* lpCPInfoEx);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetConsoleMode(
					global::System.IntPtr handle, 
					int* mode);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__1(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);
	}

	public unsafe static partial class dsound_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("dsound.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static void DirectSoundCreate(
					global::System.Guid* GUID, 
					void** directSound, 
					global::System.IntPtr pUnkOuter);

		[global::System.Runtime.InteropServices.DllImport("dsound.dll", EntryPoint="DirectSoundEnumerateA", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static void DirectSoundEnumerate(
					void* lpDSEnumCallback, 
					global::System.IntPtr lpContext);
	}

	public unsafe static partial class user32_dll_PInvokes
	{
		public static global::System.IntPtr GetDesktopWindow()
		{
			throw new global::System.TypeLoadException("Неразрешенный метод P/Invoke \"user32.dll!GetDesktopWindow\" из этого метода. Найдите этот метод в предупреждениях" +
					" сборки для получения дополнительных сведений. ");
		}
	}

	public unsafe static partial class _MRT__PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint RhpGetFuncEvalParameterBufferSize();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint RhpGetFuncEvalMode();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint RhpRecordDebuggeeInitiatedHandle(void* objectHandle);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void RhpVerifyDebuggerCleanup();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr RhpGetCurrentThread();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void RhWaitForPendingFinalizers(int allowReentrantWait);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", EntryPoint="RhYield", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int _RhYield();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void RhFlushProcessWriteBuffers();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RhCompatibleReentrantWaitAny(
					int alertable, 
					int timeout, 
					int count, 
					global::System.IntPtr* handles);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", EntryPoint="RhCallDescrWorker", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void RhCallDescrWorkerNative(global::System.IntPtr callDescr);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void _ecvt_s(
					byte* buffer, 
					int sizeInBytes, 
					double value, 
					int count, 
					int* dec, 
					int* sign);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void memmove(
					byte* dmem, 
					byte* smem, 
					ulong size);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void memset(
					byte* mem, 
					int value, 
					ulong size);
	}

	public unsafe static partial class __PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("*", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CallingConventionConverter_GetStubs(
					global::System.IntPtr* returnVoidStub, 
					global::System.IntPtr* returnIntegerStub, 
					global::System.IntPtr* commonStub);
	}

	public unsafe static partial class api_ms_win_core_winrt_string_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-string-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WindowsCreateStringReference(
					ushort* sourceString, 
					uint length, 
					global::System_Runtime_InteropServices.HSTRING_HEADER__System_Private_Interop* phstringHeader, 
					void* hstring);
	}

	public unsafe static partial class api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-errorhandling-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetLastError();

		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-errorhandling-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void SetLastError(uint dwErrCode);
	}

	public unsafe static partial class api_ms_win_core_winrt_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RoInitialize(uint initType);
	}

	public unsafe static partial class api_ms_win_core_localization_l1_2_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int IsValidLocaleName(ushort* lpLocaleName);

		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ResolveLocaleName(
					ushort* lpNameToResolve, 
					ushort* lpLocaleName, 
					int cchLocaleName);
	}

	public unsafe static partial class api_ms_win_core_com_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-com-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CoCreateInstance(
					byte* rclsid, 
					global::System.IntPtr pUnkOuter, 
					int dwClsContext, 
					byte* riid, 
					global::System.IntPtr* ppv);
	}

	public unsafe static partial class advapi32_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RegCloseKey(global::System.IntPtr hKey);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="RegEnumKeyExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RegEnumKeyEx(
					global::System.IntPtr hKey, 
					int dwIndex, 
					ushort* lpName, 
					int* lpcbName, 
					int* lpReserved, 
					ushort* lpClass, 
					int* lpcbClass, 
					long* lpftLastWriteTime);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="RegOpenKeyExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RegOpenKeyEx(
					global::System.IntPtr hKey, 
					ushort* lpSubKey, 
					int ulOptions, 
					int samDesired, 
					global::System.IntPtr* hkResult);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="RegQueryInfoKeyW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RegQueryInfoKey(
					global::System.IntPtr hKey, 
					ushort* lpClass, 
					int* lpcbClass, 
					global::System.IntPtr lpReserved_MustBeZero, 
					int* lpcSubKeys, 
					int* lpcbMaxSubKeyLen, 
					int* lpcbMaxClassLen, 
					int* lpcValues, 
					int* lpcbMaxValueNameLen, 
					int* lpcbMaxValueLen, 
					int* lpcbSecurityDescriptor, 
					int* lpftLastWriteTime);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="RegQueryValueExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RegQueryValueEx(
					global::System.IntPtr hKey, 
					ushort* lpValueName, 
					int* lpReserved, 
					int* lpType, 
					byte* lpData, 
					int* lpcbData);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="RegQueryValueExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RegQueryValueEx__0(
					global::System.IntPtr hKey, 
					ushort* lpValueName, 
					int* lpReserved, 
					int* lpType, 
					long* lpData, 
					int* lpcbData);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="RegQueryValueExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RegQueryValueEx__1(
					global::System.IntPtr hKey, 
					ushort* lpValueName, 
					int* lpReserved, 
					int* lpType, 
					int* lpData, 
					int* lpcbData);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="RegQueryValueExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RegQueryValueEx__2(
					global::System.IntPtr hKey, 
					ushort* lpValueName, 
					int* lpReserved, 
					int* lpType, 
					ushort* lpData, 
					int* lpcbData);
	}

	public unsafe static partial class OleAut32_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("OleAut32", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void SysFreeString(global::System.IntPtr bstr);
	}

	public unsafe static partial class api_ms_win_core_winrt_robuffer_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-robuffer-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int RoGetBufferMarshaler(void** bufferMarshalerPtr);
	}
}

